#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Structure to represent the adjacency list node
struct Node {
    int vertex;
    struct Node* next;
};

// Structure to represent a graph
struct Node* graph[MAX_VERTICES];
int visited[MAX_VERTICES];

// Function to create a new adjacency list node
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to add an edge to the adjacency list
void addEdge(int source, int destination) {
    struct Node* newNode = createNode(destination);
    newNode->next = graph[source];
    graph[source] = newNode;
}

// Queue structure for BFS
struct Queue {
    int items[MAX_VERTICES];
    int front, rear;
};

// Initialize queue
void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Add an element to the queue
void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_VERTICES - 1) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}

// Remove an element from the queue
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    int item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return item;
}

// Function to perform BFS traversal
void BFS(int startVertex, int vertices) {
    struct Queue q;
    initQueue(&q);

    // Mark the starting vertex as visited and enqueue it
    visited[startVertex] = 1;
    enqueue(&q, startVertex);

    printf("BFS of graph: \n");

    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);

        // Get all adjacent vertices of the dequeued vertex
        struct Node* temp = graph[currentVertex];
        while (temp != NULL) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                enqueue(&q, adjVertex);
            }
            temp = temp->next;
        }
    }
}

int main() {
    int vertices, edges;
    int source, destination, startVertex;

    // Initialize the graph and visited array
    for (int i = 0; i < MAX_VERTICES; i++) {
        graph[i] = NULL;
        visited[i] = 0;  // Initially no vertex is visited
    }

    // Input the number of vertices and edges
    printf("Enter no of vertices: ");
    scanf("%d", &vertices);
    printf("Enter no of edges: ");
    scanf("%d", &edges);

    // Input edges
    for (int i = 0; i < edges; i++) {
        printf("Enter source: ");
        scanf("%d", &source);
        printf("Enter destination: ");
        scanf("%d", &destination);
        addEdge(source, destination);  // Add edge from source to destination
    }

    // Input start vertex for BFS
    printf("Enter Start Vertex for BFS: ");
    scanf("%d", &startVertex);

    // Perform BFS traversal
    BFS(startVertex, vertices);

    return 0;
}
