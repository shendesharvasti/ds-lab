#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function prototypes
void insert(struct Node** head, int data);
void display(struct Node* head, const char* listName);
void concatenate(struct Node** head1, struct Node* head2);

// Insert node at end of circular linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    if (*head == NULL) {
        newNode->next = newNode;
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != *head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = *head;
    }
}

// Display circular linked list
void display(struct Node* head, const char* listName) {
    if (head == NULL) {
        printf("%s: Circular Linked List is empty\n", listName);
        return;
    }
    struct Node* temp = head;
    printf("%s: ", listName);
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

// Concatenate list2 to list1
void concatenate(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL && head2 == NULL) {
        printf("Nothing to concatenate\n");
        return;
    }
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }
    if (head2 == NULL) {
        return;
    }

    struct Node* tail1 = *head1;
    while (tail1->next != *head1)
        tail1 = tail1->next;

    struct Node* tail2 = head2;
    while (tail2->next != head2)
        tail2 = tail2->next;

    tail1->next = head2;
    tail2->next = *head1;

    printf("Lists concatenated.\n");
}

// Main function with menu
int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Create Circular Linked List 1\n");
        printf("2. Create Circular Linked List 2\n");
        printf("3. Display Circular Linked List 1\n");
        printf("4. Display Circular Linked List 2\n");
        printf("5. Concatenate Lists (List2 to List1)\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data for List 1 (-1 to stop): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    insert(&list1, data);
                }
                break;
            case 2:
                printf("Enter data for List 2 (-1 to stop): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    insert(&list2, data);
                }
                break;
            case 3:
                display(list1, "Circular Linked List 1");
                break;
            case 4:
                display(list2, "Circular Linked List 2");
                break;
            case 5:
                concatenate(&list1, list2);
                break;
            case 6:
                printf("Exiting\n");
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}
