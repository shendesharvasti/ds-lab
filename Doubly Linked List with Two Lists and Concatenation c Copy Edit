#include <stdio.h>
#include <stdlib.h>

// Node structure for doubly linked list
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the doubly linked list
void insert(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to display the list
void display(struct Node* head, const char* listName) {
    if (head == NULL) {
        printf("%s is empty\n", listName);
        return;
    }

    struct Node* temp = head;
    printf("%s: ", listName);
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to concatenate List2 to List1
void concatenate(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL && head2 == NULL) {
        printf("Nothing to concatenate\n");
        return;
    }

    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }

    if (head2 == NULL) {
        return;
    }

    struct Node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = head2;
    head2->prev = temp;

    printf("Lists Concatenated\n");
}

// Main function with menu
int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, value;

    while (1) {
        printf("\n1. Display List 1\n");
        printf("2. Display List 2\n");
        printf("3. Concatenate\n");
        printf("4. Quit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter elements for List 1 (separated by spaces, end with -1): ");
                while (1) {
                    scanf("%d", &value);
                    if (value == -1) break;
                    insert(&list1, value);
                }
                break;

            case 2:
                printf("Enter elements for List 2 (separated by spaces, end with -1): ");
                while (1) {
                    scanf("%d", &value);
                    if (value == -1) break;
                    insert(&list2, value);
                }
                break;

            case 3:
                display(list1, "List 1");
                display(list2, "List 2");
                concatenate(&list1, list2);
                break;

            case 4:
                printf("Exiting the program.\n");
                exit(0);

            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
